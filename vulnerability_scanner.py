import subprocess
import requests
from bs4 import BeautifulSoup

# Function to simulate scanning Android device for vulnerabilities
def scan_android_device():
    try:
        # Run Nmap scan to detect open ports and services
        nmap_output = subprocess.check_output(['nmap', '-p-', '--script', 'vulners', '-oG', '-', '192.168.1.5'])
        # Parse Nmap output to extract vulnerability information
        vulnerabilities = parse_nmap_output(nmap_output)
        return vulnerabilities
    except subprocess.CalledProcessError as e:
        print("Error running Nmap:", e)
        return []

# Function to parse Nmap output and extract vulnerability information
def parse_nmap_output(nmap_output):
    vulnerabilities = []
    lines = nmap_output.decode('utf-8').split('\n')
    for line in lines:
        if 'open' in line and 'VULNERABLE' in line:
            parts = line.split(' ')
            cve_id = parts[-1]
            description = ' '.join(parts[:-1])
            vulnerabilities.append({'CVE ID': cve_id, 'Description': description})
    return vulnerabilities

# Function to scrape vulnerabilities from the specified webpage
def scrape_webpage_vulnerabilities(url):
    vulnerabilities = []

    # Fetch HTML content of the webpage
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find all vulnerability rows in the table
        rows = soup.find_all('tr')
        for row in rows[1:]:  # Skip the header row
            cells = row.find_all('td')
            if len(cells) >= 5:
                cve_id = cells[2].text.strip()
                description = cells[3].text.strip()
                vulnerabilities.append({'CVE ID': cve_id, 'Description': description})

    return vulnerabilities

# Main function
def main():
    # URL of the webpage containing vulnerabilities
    webpage_url = "https://www.cvedetails.com/cisa-known-exploited-vulnerabilities/kev-1.html"
    
    print("Scanning Android device for vulnerabilities...")
    device_vulnerabilities = scan_android_device()

    if device_vulnerabilities:
        print("Vulnerabilities found on the Android device:")
        for vulnerability in device_vulnerabilities:
            print(f"CVE ID: {vulnerability['CVE ID']}, Description: {vulnerability['Description']}")
    else:
        print("No vulnerabilities found on the Android device.")

    print("\nScraping vulnerabilities from the webpage...")
    webpage_vulnerabilities = scrape_webpage_vulnerabilities(webpage_url)

    if webpage_vulnerabilities:
        print("\nVulnerabilities scraped from the webpage:")
        for vulnerability in webpage_vulnerabilities:
            print(f"CVE ID: {vulnerability['CVE ID']}, Description: {vulnerability['Description']}")
    else:
        print("No vulnerabilities scraped from the webpage.")

if __name__ == "__main__":
    main()
